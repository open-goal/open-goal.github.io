"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[205],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return d}});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),m=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=m(e.components);return r.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),c=m(n),d=i,f=c["".concat(s,".").concat(d)]||c[d]||u[d]||a;return n?r.createElement(f,o(o({ref:t},p),{},{components:n})):r.createElement(f,o({ref:t},p))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var m=2;m<a;m++)o[m]=n[m];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},7986:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return s},default:function(){return d},frontMatter:function(){return l},metadata:function(){return m},toc:function(){return u}});var r=n(7462),i=n(3366),a=(n(7294),n(3905)),o=["components"],l={sidebar_position:2},s="Assembly Emitter",m={unversionedId:"developing/asm_emitter",id:"developing/asm_emitter",title:"Assembly Emitter",description:'x86-64 has a lot of instructions.  They are described in Volume 2 of the 5 Volume "Intel\xae 64 and IA-32 Architectures Software Developer\u2019s Manual". Just this volume alone is over 2000 pages, which would take forever to fully implement.  As a result, we will use only a subset of these instructions.  This the rough plan:',source:"@site/documentation/developing/asm_emitter.md",sourceDirName:"developing",slug:"/developing/asm_emitter",permalink:"/docs/developing/asm_emitter",draft:!1,editUrl:"https://github.com/open-goal/open-goal.github.io/tree/master/documentation/developing/asm_emitter.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"docsSidebar",previous:{title:"Compiler Example",permalink:"/docs/developing/compiler_example"},next:{title:"Porting to x86",permalink:"/docs/developing/porting_to_x86"}},p={},u=[],c={toc:u};function d(e){var t=e.components,n=(0,i.Z)(e,o);return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"assembly-emitter"},"Assembly Emitter"),(0,a.kt)("p",null,'x86-64 has a lot of instructions.  They are described in Volume 2 of the 5 Volume "Intel\xae 64 and IA-32 Architectures Software Developer\u2019s Manual". Just this volume alone is over 2000 pages, which would take forever to fully implement.  As a result, we will use only a subset of these instructions.  This the rough plan:'),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Most instructions like ",(0,a.kt)("inlineCode",{parentName:"li"},"add")," will only be implemented with ",(0,a.kt)("inlineCode",{parentName:"li"},"r64 r64")," versions."),(0,a.kt)("li",{parentName:"ul"},"To accomplish something like ",(0,a.kt)("inlineCode",{parentName:"li"},"add rax, 1"),", we will use a temporary register ",(0,a.kt)("inlineCode",{parentName:"li"},"X"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"mov X, 1")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"add rax, X")),(0,a.kt)("li",{parentName:"ul"},"The constant propagation system will be able to provide enough information that we could eventually use ",(0,a.kt)("inlineCode",{parentName:"li"},"add r64 immX")," and similar if needed."),(0,a.kt)("li",{parentName:"ul"},"Register allocation should handle the case ",(0,a.kt)("inlineCode",{parentName:"li"},"(set! x (+ 3 y))")," as:",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"mov x, 3")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"add x, y")))),(0,a.kt)("li",{parentName:"ul"},"but ",(0,a.kt)("inlineCode",{parentName:"li"},"(set! x (+ y 3))"),", in cases where ",(0,a.kt)("inlineCode",{parentName:"li"},"y")," is needed after and ",(0,a.kt)("inlineCode",{parentName:"li"},"x")," can't take its place, will become the inefficient",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"mov x, y")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"mov rtemp, 3")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"add x, rtemp")))))),(0,a.kt)("li",{parentName:"ul"},"Loading constants into registers will be done efficiently, using the same strategy used by modern versions of ",(0,a.kt)("inlineCode",{parentName:"li"},"gcc")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"clang"),"."),(0,a.kt)("li",{parentName:"ul"},"Memory access will be done in the form ",(0,a.kt)("inlineCode",{parentName:"li"},"mov rdest, [roff + raddr]")," where ",(0,a.kt)("inlineCode",{parentName:"li"},"roff")," is the offset register. Doing memory access in this form was found to be much faster in simple benchmark test."),(0,a.kt)("li",{parentName:"ul"},"Memory access to the stack will have an extra ",(0,a.kt)("inlineCode",{parentName:"li"},"sub")," and more complicated dereference.  GOAL code seems to avoid using the stack in most places, and I suspect the programmers attempted to avoid stack spills.",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"mov rdest, rsp")," : coloring move for upcoming subtract"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"sub rdest, roff")," : convert real pointer to GOAL pointer"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"mov rdest, [rdest + roff + variable_offset]")," : access memory through normal GOAL deref."),(0,a.kt)("li",{parentName:"ul"},"Note - we should check that the register allocator gets this right always, and eliminates moves and avoid using a temporary register."),(0,a.kt)("li",{parentName:"ul"},"Again, the constant propagation should give use enough information, if we ever want/need to implement a more efficient ",(0,a.kt)("inlineCode",{parentName:"li"},"mov rdest, [rsp + variable_offset]")," type instructions."))),(0,a.kt)("li",{parentName:"ul"},"Memory access to static data should use ",(0,a.kt)("inlineCode",{parentName:"li"},"rip")," addressing, like ",(0,a.kt)("inlineCode",{parentName:"li"},"mov rdest, [rip + offset]"),". And creating pointers to static data could be ",(0,a.kt)("inlineCode",{parentName:"li"},"lea rdest, [rip - roff + offset]"))))}d.isMDXComponent=!0}}]);