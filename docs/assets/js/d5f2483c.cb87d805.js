"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[355],{3905:function(e,n,t){t.d(n,{Zo:function(){return l},kt:function(){return f}});var o=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function u(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=o.createContext({}),s=function(e){var n=o.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):u(u({},n),e)),t},l=function(e){var n=s(e.components);return o.createElement(c.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},d=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,c=e.parentName,l=a(e,["components","mdxType","originalType","parentName"]),d=s(t),f=r,m=d["".concat(c,".").concat(f)]||d[f]||p[f]||i;return t?o.createElement(m,u(u({ref:n},l),{},{components:t})):o.createElement(m,u({ref:n},l))}));function f(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,u=new Array(i);u[0]=d;var a={};for(var c in n)hasOwnProperty.call(n,c)&&(a[c]=n[c]);a.originalType=e,a.mdxType="string"==typeof e?e:r,u[1]=a;for(var s=2;s<i;s++)u[s]=t[s];return o.createElement.apply(null,u)}return o.createElement.apply(null,t)}d.displayName="MDXCreateElement"},5552:function(e,n,t){t.r(n),t.d(n,{assets:function(){return l},contentTitle:function(){return c},default:function(){return f},frontMatter:function(){return a},metadata:function(){return s},toc:function(){return p}});var o=t(7462),r=t(3366),i=(t(7294),t(3905)),u=["components"],a={sidebar_position:3},c="Editor Configuration",s={unversionedId:"usage/editor_setup",id:"usage/editor_setup",title:"Editor Configuration",description:"EMacs",source:"@site/documentation/usage/editor_setup.md",sourceDirName:"usage",slug:"/usage/editor_setup",permalink:"/docs/usage/editor_setup",draft:!1,editUrl:"https://github.com/open-goal/open-goal.github.io/tree/master/documentation/usage/editor_setup.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"docsSidebar",previous:{title:"OpenGOAL Debugger",permalink:"/docs/usage/debugging"},next:{title:"Developing",permalink:"/docs/category/developing"}},l={},p=[{value:"EMacs",id:"emacs",level:2}],d={toc:p};function f(e){var n=e.components,t=(0,r.Z)(e,u);return(0,i.kt)("wrapper",(0,o.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"editor-configuration"},"Editor Configuration"),(0,i.kt)("h2",{id:"emacs"},"EMacs"),(0,i.kt)("p",null,"The following EMacs config file should get you started and configure OpenGOAL's formatting style"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lisp"},";; make gc files use lisp-mode\n(add-to-list 'auto-mode-alist '(\"\\\\.gc\\\\'\" . lisp-mode))\n;; run setup-goal when we enter lisp mode\n(add-hook 'lisp-mode-hook 'setup-goal)\n\n(defun setup-goal ()\n  ;; if we are in a gc file, change indent settings for GOAL\n  (when (and (stringp buffer-file-name)\n             (string-match \"\\\\.gc\\\\'\" buffer-file-name))\n    (put 'with-pp      'common-lisp-indent-function 0)\n    (put 'while        'common-lisp-indent-function 1)\n    (put 'rlet         'common-lisp-indent-function 1)\n    (put 'until        'common-lisp-indent-function 1)\n    (put 'countdown    'common-lisp-indent-function 1)\n    (put 'defun-debug  'common-lisp-indent-function 2)\n    (put 'defenum      'common-lisp-indent-function 2)\n\n    ;; indent for common lisp, this makes if's look nicer\n    (custom-set-variables '(lisp-indent-function 'common-lisp-indent-function))\n    (autoload 'common-lisp-indent-function \"cl-indent\" \"Common Lisp indent.\")\n    ;; use spaces, not tabs\n    (setq-default indent-tabs-mode nil)\n    )\n  )\n\n")))}f.isMDXComponent=!0}}]);